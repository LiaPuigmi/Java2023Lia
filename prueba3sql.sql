-- MySQL Script generated by MySQL Workbench
-- Tue Oct 31 10:49:12 2023
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `mydb` DEFAULT CHARACTER SET utf8 ;
USE `mydb` ;

-- -----------------------------------------------------
-- Table `mydb`.`salesman`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`salesman` (
  `salesman_id` INT NOT NULL,
  `name` VARCHAR(30) NULL,
  `city` VARCHAR(15) NULL,
  `commission` DECIMAL(5,2) NULL,
  PRIMARY KEY (`salesman_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`customer`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`customer` (
  `customer_id` INT(5) NOT NULL,
  `cust_name` VARCHAR(30) NULL,
  `city` VARCHAR(15) NULL,
  `grade` INT(3) NULL,
  PRIMARY KEY (`customer_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`orders`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`orders` (
  `ord_no` INT(5) NOT NULL,
  `purch_amt` DECIMAL(8,2) NULL,
  `ord_date` DATE NULL,
  `salesman_salesman_id` INT NOT NULL,
  `customer_customer_id` INT(5) NOT NULL,
  PRIMARY KEY (`ord_no`, `salesman_salesman_id`, `customer_customer_id`),
  INDEX `fk_orders_salesman1_idx` (`salesman_salesman_id` ASC) VISIBLE,
  INDEX `fk_orders_customer1_idx` (`customer_customer_id` ASC) VISIBLE,
  CONSTRAINT `fk_orders_salesman1`
    FOREIGN KEY (`salesman_salesman_id`)
    REFERENCES `mydb`.`salesman` (`salesman_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_orders_customer1`
    FOREIGN KEY (`customer_customer_id`)
    REFERENCES `mydb`.`customer` (`customer_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;


-- Introduce 10 inserts en cada tabla
INSERT INTO `mydb`.`salesman` (`salesman_id`, `name`, `city`, `commission`) VALUES 
(1, 'Juan', 'Barcelona', 0.1),
(2, 'Ana', 'Madrid', 0.15),
(3, 'Carlos', 'Valencia', 0.2),
(4, 'Maria', 'Sevilla', 0.12),
(5, 'Pedro', 'Zaragoza', 0.18),
(6, 'Isabel', 'Málaga', 0.14),
(7, 'Javier', 'Murcia', 0.16),
(8, 'Teresa', 'Palma', 0.13),
(9, 'Luis', 'Bilbao', 0.17),
(10, 'Carmen', 'Alicante', 0.19);

INSERT INTO `mydb`.`customer` (`customer_id`, `cust_name`, `city`, `grade`) VALUES 
(1, 'Empresa1', 'Barcelona', 100),
(2, 'Empresa2', 'Madrid', 200),
(3, 'Empresa3', 'Valencia', 150),
(4, 'Empresa4', 'Sevilla', 180),
(5, 'Empresa5', 'Zaragoza', 210),
(6, 'Empresa6', 'Málaga', 190),
(7, 'Empresa7', 'Murcia', 160),
(8, 'Empresa8', 'Palma', 170),
(9, 'Empresa9', 'Bilbao', 220),
(10, 'Empresa10', 'Alicante', 230);

INSERT INTO `mydb`.`orders` (`ord_no`, `purch_amt`, `ord_date`, `salesman_salesman_id`, `customer_customer_id`) VALUES 
(1, 1000.00, CURDATE(), 1, 1),
(2, 1500.00, CURDATE(), 2, 2),
(3, 2000.00, CURDATE(), 3, 3),
(4, 2500.00, CURDATE(), 4, 4),
(5, 3000.00, CURDATE(), 5, 5),
(6, 3500.00, CURDATE(), 6, 6),
(7, 4000.00, CURDATE(), 7, 7),
(8, 4500.00, CURDATE(), 8, 8),
(9, 5000.00, CURDATE(), 9, 9),
(10,5500.00,CURDATE(),10 ,10);

SELECT * FROM orders;
SELECT * FROM customer;
SELECT * FROM salesman;

-- Cuenta los elementos el total de registros que tiene la tabla orders
SELECT COUNT(ord_no) FROM mydb.orders;
-- Muestra los customers que tienen nombres distintos, es decir, que no se repiten.
SELECT DISTINCT cust_name FROM mydb.customer;
-- Ordena los salemans en función de las ventas que han realizado.
SELECT name, purch_amt FROM salesman JOIN orders ON salesman_id=salesman_salesman_id ORDER BY orders.purch_amt DESC;
-- Muestra solamente los 5 primeros customers (ordenados por id)
SELECT * FROM mydb.customer LIMIT 5;
-- Saca el registro con un PURCH_AMT menor.
SELECT MIN(purch_amt) FROM mydb.orders;
-- Saca el registro con un PURCH_AMT mayor.
SELECT MAX(purch_amt) FROM mydb.orders;
